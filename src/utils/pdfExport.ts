import jsPDF from 'jspdf';
import type { ConversationWithMessages } from '../api/types';

/**
 * Export conversation to PDF
 */
export async function exportConversationToPDF(conversation: ConversationWithMessages) {
  try {
    // Create new PDF document
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const lineHeight = 7;
    let yPosition = margin;

    // Helper function to add new page if needed
    const checkPageBreak = (requiredHeight: number) => {
      if (yPosition + requiredHeight > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
      }
    };

    // Helper function to wrap text
    const wrapText = (text: string, maxWidth: number): string[] => {
      return pdf.splitTextToSize(text, maxWidth);
    };

    // Add header
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Indian Traffic Law AI Assistant', margin, yPosition);
    yPosition += lineHeight + 5;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Conversation: ${conversation.title}`, margin, yPosition);
    yPosition += lineHeight;

    pdf.text(`Date: ${new Date(conversation.created_at).toLocaleDateString()}`, margin, yPosition);
    yPosition += lineHeight;

    pdf.text(`Messages: ${conversation.message_count}`, margin, yPosition);
    yPosition += lineHeight + 10;

    // Add separator line
    pdf.setLineWidth(0.5);
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // Add messages
    conversation.messages.forEach((message, index) => {
      // Set font for role
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'bold');
      
      const roleText = message.role === 'user' ? 'YOU:' : 'AI ASSISTANT:';
      const roleColor: [number, number, number] = message.role === 'user' ? [59, 130, 246] : [34, 197, 94]; // Blue for user, green for AI
      
      checkPageBreak(20);
      
      // Add role with color
      pdf.setTextColor(...roleColor);
      pdf.text(roleText, margin, yPosition);
      yPosition += lineHeight + 2;

      // Add message content
      pdf.setTextColor(0, 0, 0); // Black text
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(9);
      
      const wrappedContent = wrapText(message.content, pageWidth - 2 * margin);
      
      wrappedContent.forEach((line: string) => {
        checkPageBreak(lineHeight);
        pdf.text(line, margin, yPosition);
        yPosition += lineHeight;
      });

      // Add timestamp
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128); // Gray
      const timestamp = new Date(message.timestamp).toLocaleString();
      pdf.text(timestamp, margin, yPosition);
      yPosition += lineHeight + 8;

      // Add separator between messages (except last)
      if (index < conversation.messages.length - 1) {
        checkPageBreak(5);
        pdf.setDrawColor(200, 200, 200);
        pdf.setLineWidth(0.2);
        pdf.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 8;
      }
    });

    // Add footer
    const totalPages = pdf.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text(
        `Page ${i} of ${totalPages} • Generated by Traffic AI • ${new Date().toLocaleDateString()}`,
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
    }

    // Generate filename
    const filename = `Traffic_AI_Conversation_${conversation.title.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;

    // Save the PDF
    pdf.save(filename);

    return { success: true, filename };
  } catch (error: any) {
    console.error('PDF export error:', error);
    return { 
      success: false, 
      error: error.message || 'Failed to export PDF' 
    };
  }
}